package domain

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Order) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "text":
			z.Text, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "amend_text":
			z.AmendText, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AmendText")
				return
			}
		case "create_time":
			z.CreateTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "update_time":
			z.UpdateTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UpdateTime")
				return
			}
		case "create_time_ms":
			z.CreateTimeMs, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateTimeMs")
				return
			}
		case "update_time_ms":
			z.UpdateTimeMs, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UpdateTimeMs")
				return
			}
		case "status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "currency_pair":
			z.CurrencyPair, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CurrencyPair")
				return
			}
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "account":
			z.Account, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "side":
			z.Side, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Side")
				return
			}
		case "amount":
			z.Amount, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "price":
			z.Price, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "time_in_force":
			z.TimeInForce, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TimeInForce")
				return
			}
		case "iceberg":
			z.Iceberg, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Iceberg")
				return
			}
		case "left":
			z.Left, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Left")
				return
			}
		case "filled_amount":
			z.FilledAmount, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FilledAmount")
				return
			}
		case "fill_price":
			z.FillPrice, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FillPrice")
				return
			}
		case "filled_total":
			z.FilledTotal, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FilledTotal")
				return
			}
		case "avg_deal_price":
			z.AvgDealPrice, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AvgDealPrice")
				return
			}
		case "fee":
			z.Fee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Fee")
				return
			}
		case "fee_currency":
			z.FeeCurrency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FeeCurrency")
				return
			}
		case "point_fee":
			z.PointFee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PointFee")
				return
			}
		case "gt_fee":
			z.GtFee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GtFee")
				return
			}
		case "gt_maker_fee":
			z.GtMakerFee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GtMakerFee")
				return
			}
		case "gt_taker_fee":
			z.GtTakerFee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "GtTakerFee")
				return
			}
		case "gt_discount":
			z.GtDiscount, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "GtDiscount")
				return
			}
		case "rebated_fee":
			z.RebatedFee, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RebatedFee")
				return
			}
		case "rebated_fee_currency":
			z.RebatedFeeCurrency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RebatedFeeCurrency")
				return
			}
		case "finish_as":
			z.FinishAs, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FinishAs")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Order) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 31
	// write "id"
	err = en.Append(0xde, 0x0, 0x1f, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "text"
	err = en.Append(0xa4, 0x74, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text)
	if err != nil {
		err = msgp.WrapError(err, "Text")
		return
	}
	// write "amend_text"
	err = en.Append(0xaa, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.AmendText)
	if err != nil {
		err = msgp.WrapError(err, "AmendText")
		return
	}
	// write "create_time"
	err = en.Append(0xab, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// write "update_time"
	err = en.Append(0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UpdateTime)
	if err != nil {
		err = msgp.WrapError(err, "UpdateTime")
		return
	}
	// write "create_time_ms"
	err = en.Append(0xae, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateTimeMs)
	if err != nil {
		err = msgp.WrapError(err, "CreateTimeMs")
		return
	}
	// write "update_time_ms"
	err = en.Append(0xae, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UpdateTimeMs)
	if err != nil {
		err = msgp.WrapError(err, "UpdateTimeMs")
		return
	}
	// write "status"
	err = en.Append(0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "currency_pair"
	err = en.Append(0xad, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.CurrencyPair)
	if err != nil {
		err = msgp.WrapError(err, "CurrencyPair")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "account"
	err = en.Append(0xa7, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Account)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// write "side"
	err = en.Append(0xa4, 0x73, 0x69, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Side)
	if err != nil {
		err = msgp.WrapError(err, "Side")
		return
	}
	// write "amount"
	err = en.Append(0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	// write "price"
	err = en.Append(0xa5, 0x70, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "time_in_force"
	err = en.Append(0xad, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.TimeInForce)
	if err != nil {
		err = msgp.WrapError(err, "TimeInForce")
		return
	}
	// write "iceberg"
	err = en.Append(0xa7, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Iceberg)
	if err != nil {
		err = msgp.WrapError(err, "Iceberg")
		return
	}
	// write "left"
	err = en.Append(0xa4, 0x6c, 0x65, 0x66, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Left)
	if err != nil {
		err = msgp.WrapError(err, "Left")
		return
	}
	// write "filled_amount"
	err = en.Append(0xad, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.FilledAmount)
	if err != nil {
		err = msgp.WrapError(err, "FilledAmount")
		return
	}
	// write "fill_price"
	err = en.Append(0xaa, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FillPrice)
	if err != nil {
		err = msgp.WrapError(err, "FillPrice")
		return
	}
	// write "filled_total"
	err = en.Append(0xac, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.FilledTotal)
	if err != nil {
		err = msgp.WrapError(err, "FilledTotal")
		return
	}
	// write "avg_deal_price"
	err = en.Append(0xae, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AvgDealPrice)
	if err != nil {
		err = msgp.WrapError(err, "AvgDealPrice")
		return
	}
	// write "fee"
	err = en.Append(0xa3, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Fee)
	if err != nil {
		err = msgp.WrapError(err, "Fee")
		return
	}
	// write "fee_currency"
	err = en.Append(0xac, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.FeeCurrency)
	if err != nil {
		err = msgp.WrapError(err, "FeeCurrency")
		return
	}
	// write "point_fee"
	err = en.Append(0xa9, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.PointFee)
	if err != nil {
		err = msgp.WrapError(err, "PointFee")
		return
	}
	// write "gt_fee"
	err = en.Append(0xa6, 0x67, 0x74, 0x5f, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.GtFee)
	if err != nil {
		err = msgp.WrapError(err, "GtFee")
		return
	}
	// write "gt_maker_fee"
	err = en.Append(0xac, 0x67, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.GtMakerFee)
	if err != nil {
		err = msgp.WrapError(err, "GtMakerFee")
		return
	}
	// write "gt_taker_fee"
	err = en.Append(0xac, 0x67, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.GtTakerFee)
	if err != nil {
		err = msgp.WrapError(err, "GtTakerFee")
		return
	}
	// write "gt_discount"
	err = en.Append(0xab, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.GtDiscount)
	if err != nil {
		err = msgp.WrapError(err, "GtDiscount")
		return
	}
	// write "rebated_fee"
	err = en.Append(0xab, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.RebatedFee)
	if err != nil {
		err = msgp.WrapError(err, "RebatedFee")
		return
	}
	// write "rebated_fee_currency"
	err = en.Append(0xb4, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.RebatedFeeCurrency)
	if err != nil {
		err = msgp.WrapError(err, "RebatedFeeCurrency")
		return
	}
	// write "finish_as"
	err = en.Append(0xa9, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.FinishAs)
	if err != nil {
		err = msgp.WrapError(err, "FinishAs")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Order) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 31
	// string "id"
	o = append(o, 0xde, 0x0, 0x1f, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "text"
	o = append(o, 0xa4, 0x74, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.Text)
	// string "amend_text"
	o = append(o, 0xaa, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.AmendText)
	// string "create_time"
	o = append(o, 0xab, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.CreateTime)
	// string "update_time"
	o = append(o, 0xab, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.UpdateTime)
	// string "create_time_ms"
	o = append(o, 0xae, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.CreateTimeMs)
	// string "update_time_ms"
	o = append(o, 0xae, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73)
	o = msgp.AppendInt64(o, z.UpdateTimeMs)
	// string "status"
	o = append(o, 0xa6, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "currency_pair"
	o = append(o, 0xad, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72)
	o = msgp.AppendString(o, z.CurrencyPair)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "account"
	o = append(o, 0xa7, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Account)
	// string "side"
	o = append(o, 0xa4, 0x73, 0x69, 0x64, 0x65)
	o = msgp.AppendString(o, z.Side)
	// string "amount"
	o = append(o, 0xa6, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Amount)
	// string "price"
	o = append(o, 0xa5, 0x70, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Price)
	// string "time_in_force"
	o = append(o, 0xad, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65)
	o = msgp.AppendString(o, z.TimeInForce)
	// string "iceberg"
	o = append(o, 0xa7, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67)
	o = msgp.AppendString(o, z.Iceberg)
	// string "left"
	o = append(o, 0xa4, 0x6c, 0x65, 0x66, 0x74)
	o = msgp.AppendString(o, z.Left)
	// string "filled_amount"
	o = append(o, 0xad, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendString(o, z.FilledAmount)
	// string "fill_price"
	o = append(o, 0xaa, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.FillPrice)
	// string "filled_total"
	o = append(o, 0xac, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendString(o, z.FilledTotal)
	// string "avg_deal_price"
	o = append(o, 0xae, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.AvgDealPrice)
	// string "fee"
	o = append(o, 0xa3, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.Fee)
	// string "fee_currency"
	o = append(o, 0xac, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	o = msgp.AppendString(o, z.FeeCurrency)
	// string "point_fee"
	o = append(o, 0xa9, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.PointFee)
	// string "gt_fee"
	o = append(o, 0xa6, 0x67, 0x74, 0x5f, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.GtFee)
	// string "gt_maker_fee"
	o = append(o, 0xac, 0x67, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.GtMakerFee)
	// string "gt_taker_fee"
	o = append(o, 0xac, 0x67, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.GtTakerFee)
	// string "gt_discount"
	o = append(o, 0xab, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.GtDiscount)
	// string "rebated_fee"
	o = append(o, 0xab, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65)
	o = msgp.AppendString(o, z.RebatedFee)
	// string "rebated_fee_currency"
	o = append(o, 0xb4, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	o = msgp.AppendString(o, z.RebatedFeeCurrency)
	// string "finish_as"
	o = append(o, 0xa9, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x73)
	o = msgp.AppendString(o, z.FinishAs)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Order) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "text":
			z.Text, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
		case "amend_text":
			z.AmendText, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AmendText")
				return
			}
		case "create_time":
			z.CreateTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "update_time":
			z.UpdateTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdateTime")
				return
			}
		case "create_time_ms":
			z.CreateTimeMs, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateTimeMs")
				return
			}
		case "update_time_ms":
			z.UpdateTimeMs, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdateTimeMs")
				return
			}
		case "status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "currency_pair":
			z.CurrencyPair, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrencyPair")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "account":
			z.Account, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "side":
			z.Side, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Side")
				return
			}
		case "amount":
			z.Amount, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "price":
			z.Price, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "time_in_force":
			z.TimeInForce, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeInForce")
				return
			}
		case "iceberg":
			z.Iceberg, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Iceberg")
				return
			}
		case "left":
			z.Left, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Left")
				return
			}
		case "filled_amount":
			z.FilledAmount, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FilledAmount")
				return
			}
		case "fill_price":
			z.FillPrice, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FillPrice")
				return
			}
		case "filled_total":
			z.FilledTotal, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FilledTotal")
				return
			}
		case "avg_deal_price":
			z.AvgDealPrice, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AvgDealPrice")
				return
			}
		case "fee":
			z.Fee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fee")
				return
			}
		case "fee_currency":
			z.FeeCurrency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FeeCurrency")
				return
			}
		case "point_fee":
			z.PointFee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PointFee")
				return
			}
		case "gt_fee":
			z.GtFee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GtFee")
				return
			}
		case "gt_maker_fee":
			z.GtMakerFee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GtMakerFee")
				return
			}
		case "gt_taker_fee":
			z.GtTakerFee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GtTakerFee")
				return
			}
		case "gt_discount":
			z.GtDiscount, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GtDiscount")
				return
			}
		case "rebated_fee":
			z.RebatedFee, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RebatedFee")
				return
			}
		case "rebated_fee_currency":
			z.RebatedFeeCurrency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RebatedFeeCurrency")
				return
			}
		case "finish_as":
			z.FinishAs, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FinishAs")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Order) Msgsize() (s int) {
	s = 3 + 3 + msgp.StringPrefixSize + len(z.Id) + 5 + msgp.StringPrefixSize + len(z.Text) + 11 + msgp.StringPrefixSize + len(z.AmendText) + 12 + msgp.Int64Size + 12 + msgp.Int64Size + 15 + msgp.Int64Size + 15 + msgp.Int64Size + 7 + msgp.StringPrefixSize + len(z.Status) + 14 + msgp.StringPrefixSize + len(z.CurrencyPair) + 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.StringPrefixSize + len(z.Account) + 5 + msgp.StringPrefixSize + len(z.Side) + 7 + msgp.StringPrefixSize + len(z.Amount) + 6 + msgp.StringPrefixSize + len(z.Price) + 14 + msgp.StringPrefixSize + len(z.TimeInForce) + 8 + msgp.StringPrefixSize + len(z.Iceberg) + 5 + msgp.StringPrefixSize + len(z.Left) + 14 + msgp.StringPrefixSize + len(z.FilledAmount) + 11 + msgp.StringPrefixSize + len(z.FillPrice) + 13 + msgp.StringPrefixSize + len(z.FilledTotal) + 15 + msgp.StringPrefixSize + len(z.AvgDealPrice) + 4 + msgp.StringPrefixSize + len(z.Fee) + 13 + msgp.StringPrefixSize + len(z.FeeCurrency) + 10 + msgp.StringPrefixSize + len(z.PointFee) + 7 + msgp.StringPrefixSize + len(z.GtFee) + 13 + msgp.StringPrefixSize + len(z.GtMakerFee) + 13 + msgp.StringPrefixSize + len(z.GtTakerFee) + 12 + msgp.BoolSize + 12 + msgp.StringPrefixSize + len(z.RebatedFee) + 21 + msgp.StringPrefixSize + len(z.RebatedFeeCurrency) + 10 + msgp.StringPrefixSize + len(z.FinishAs)
	return
}
